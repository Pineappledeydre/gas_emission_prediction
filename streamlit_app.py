import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
import random
from catboost import CatBoostRegressor
import joblib
import plotly.express as px

st.set_page_config(page_title="GHG Emission Forecaster", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    return joblib.load("cat_model.pkl")

model = load_model()

st.markdown("## üåç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤")
st.markdown("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∏–º–∏—Ç–∏—Ä—É—é—â–∞—è –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—â–∞—è –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ/CH‚ÇÑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
st.divider()

col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üì° –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")

    def generate_realtime_data():
        return {
            'site_id': random.choice([0, 1, 2, 3, 4]),
            'temp': np.random.normal(10, 5),
            'pressure': np.random.normal(1013, 5),
            'humidity': np.random.uniform(30, 90),
            'load': np.random.uniform(50, 100),
            'maintenance_flag': np.random.choice([0, 1], p=[0.95, 0.05]),
            'gas_type': random.choice([0, 1]),  # 0 = CH4, 1 = CO2
            'operational_hours': np.random.randint(16, 24)
        }

    data_log = []
    
    placeholder = st.empty()
    with placeholder.container():
        for _ in range(20):
            timestamp_now = datetime.now().strftime('%H:%M:%S')
            for gas_type in [0, 1]:
                data = generate_realtime_data()
                data['gas_type'] = gas_type
                df_input = pd.DataFrame([data])
                prediction = model.predict(df_input)[0]
                data['prediction'] = prediction
                data['timestamp'] = timestamp_now
                data_log.append(data)
    
                st.write(f"**‚è±Ô∏è {timestamp_now} ‚Äî {'CH‚ÇÑ' if gas_type == 0 else 'CO‚ÇÇ'}**")
                st.dataframe(df_input, use_container_width=True)
                st.success(f"üí® –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–±—Ä–æ—Å–∞: **{prediction:.2f}** –µ–¥–∏–Ω–∏—Ü")
                st.divider()
    
            time.sleep(1.5)

with col2:
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")

    if data_log:
        df_log = pd.DataFrame(data_log)

        df_avg = (
            df_log.groupby(['timestamp', 'gas_type'])
            .agg({'prediction': 'mean'})
            .reset_index()
        )
        df_avg['gas_type'] = df_avg['gas_type'].map({0: "CH‚ÇÑ", 1: "CO‚ÇÇ"})
        
        fig = px.line(df_avg, x='timestamp', y='prediction', color='gas_type',
                      title="üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (CH‚ÇÑ vs CO‚ÇÇ)",
                      labels={'prediction': '–ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–±—Ä–æ—Å–æ–≤', 'timestamp': '–í—Ä–µ–º—è'})
        st.plotly_chart(fig, use_container_width=True)

        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ç–æ—á–µ–∫
        st.markdown("### –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        st.dataframe(df_log.tail(5)[['timestamp', 'temp', 'pressure', 'load', 'gas_type', 'prediction']],
                     use_container_width=True)
